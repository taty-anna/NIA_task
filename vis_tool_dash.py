"""This script uses Dash to create interactive visualizations that help in understanding the analysis results.Two graphs are being generated: Line chart showing charge and discharge prices and bar chart showing revenues producedby the second strategy. This tool adds flexibility to choose desired frequencies: day, month, year."""import dashfrom dash import dcc, htmlfrom dash.dependencies import Input, Outputimport plotly.express as pximport pandas as pd# Import datadata = pd.read_csv("optimized_results_cycles_1.csv")data['Datetime'] = pd.to_datetime(data['Datetime'])# Initialize the Dash appapp = dash.Dash(__name__)# Define the app layout with a darker themeapp.layout = html.Div([    html.H1("Battery Energy Storage Dashboard", style={'color': '#FFFFFF', 'backgroundColor': '#333333'}),    # Dropdown for selecting data frequency for Graphs (Price and Revenues)    dcc.Dropdown(        id='frequency-dropdown',        options=[            {'label': 'Day', 'value': 'D'},            {'label': 'Month', 'value': 'M'},            {'label': 'Year', 'value': 'Y'}        ],        value='D',  # Default value set to Day        multi=False,        style={'color': '#000000'}    ),    # Line Chart for Prices    dcc.Graph(id='price-chart'),    # Bar Chart for Revenues    dcc.Graph(id='revenue-chart')], style={'backgroundColor': '#333333', 'color': '#FFFFFF', 'padding': '10px'})# Callback to update the Price and Revenue charts based on the selected frequency@app.callback(    [Output('price-chart', 'figure'),     Output('revenue-chart', 'figure')],    [Input('frequency-dropdown', 'value')])def update_charts(selected_frequency):    df = data.resample(selected_frequency, on='Datetime').sum().reset_index()    # Create the line chart for prices    price_chart = px.line(df, x='Datetime', y=['Charge Price (£/MWh)', 'Discharge Price (£/MWh)'],                          title="Prices Over Time",                          labels={'Datetime': 'Time', 'value': '£/MWh'},                          height=400)    price_chart.update_layout(        plot_bgcolor='rgba(0,0,0,0)',        paper_bgcolor='rgba(0,0,0,0)',        font_color="white"    )    # Create the bar chart for revenues    revenue_chart = px.bar(df, x='Datetime', y='Revenue (£/MWh)',                           title="Revenue Over Time",                           labels={'Datetime': 'Time', 'value': '£'},                           height=400)    revenue_chart.update_layout(        plot_bgcolor='rgba(0,0,0,0)',        paper_bgcolor='rgba(0,0,0,0)',        font_color="white"    )    return price_chart, revenue_chart